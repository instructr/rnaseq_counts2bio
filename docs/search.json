[
  {
    "objectID": "tutorial.html",
    "href": "tutorial.html",
    "title": "Hands-on Tutorial",
    "section": "",
    "text": "Differential Expression Analysis with DESeq2\nIn this tutorial, we will guide you through the practical steps necessary to set up the RStudio project, load the required packages and data, execute the DESeq2 analysis, and derive biological insights from the DE results.\n\n\n\n0. RStudio Proj1. Setup2. Quality control3. Differential Expression4. Visualise DE results5. Functional analysis\n\n\nAs with any analysis, the first step is to create a folder to store your work.\n\nChoose an appropriate location on your computer, then set up the following folder structure:\n\n  rnaseq_counts2bio_course/    \n  ├── data/    \n  ├── de_results/    \n  ├── scripts/    \n  └── sandbox/   \n\n\n\n\n\n\nTip: Set Up a Clear Folder Structure Early\n\n\n\n\n\nBefore collecting data, define a clear folder structure and file naming convention. This improves organization, avoids confusion, and supports collaboration. A consistent setup helps you and your team quickly locate and understand files.\nStart organized - your future self (and collaborators) will thank you!\nSuggested minimal structure for a data analysis project:\nproject_name_no_spaces_no_special_chars/    \n├── data/            # Raw and processed data\n│   ├── processed/         \n│   └── raw/   \n├── output/          # Figures, tables \n├── results/         # Analysis results, with appropriate sub-folders\n├── scripts/         # Analysis and processing code\n└── sandbox/         # Exploratory work (not for sharing)\n\n\n\n\nCreate a new RStudio project inside the rnaseq_counts2bio_course folder:\n\n\n2.1 Go to the File menu and select New Project;\n2.2 Select Existing Directory;\n2.3 Navigate to the course directory rnaseq_counts2bio_course and click on Create Project;\n2.4 The new project will be automatically opened in RStudio, and inherits the directory name.\n\n\nWe can check whether we are in the correct working directory with getwd().\n\nNext, go to the File menu, select New File and then R Markdown to create a notebook style script file, using literate programming, in which we will save all the R code required for this analysis.\n\n\n3.1 In the Title write: Differential expression analysis with DESeq2, choose HTML as Default Output Format, and insert the author name.\n3.2 Save the file as de_analysis.Rmd inside the scripts folder.\n3.3 Delete the example markdown code, except the YAML header (the first lines between ---), and the setup code chunk.\n\nFrom now on, each command described in the course will be added to this script.\n\n\n\n\nOur case study\n\n\n\n\nArtificial Gravity Attenuates the Transcriptomic Response to Spaceflight in the Optic Nerve and Retina\n\nProlonged exposure to microgravity in space poses risks to eye health. To explore a potential countermeasure, researchers exposed mice on the International Space Station to varying levels of artificial gravity (0, 0.33, 0.67, and 1G) using centrifugation. After returning the mice to Earth, RNA-seq of their optic nerve and retina revealed that microgravity triggers gene expression changes. Adding artificial gravity on board the ISS can attenuate the transcriptomic response to microgravity in a dose-dependent manner. Such attenuation may effectively mitigate spaceflight-induced detrimental effects on ocular tissue.\n\nData repository: NASA Open Science for Life in Space\nDOI: https://doi.org/10.26030/d6dj-d777\nExperimental factors: Spaceflight, Altered gravity\nOrganism: Mus musculus (mouse)\nAssay: transcription profiling\n\nTechnology: RNA Sequencing (RNA-Seq)\nPlatform: Illumina\n\n\n\n\n\n\n\n\nHands-on tutorial\n\n\n\n1.1 Load packages and data\n\n\nCode\n#---------------------------------------------------------\n# Install the required packages (uncomment to install)\n#---------------------------------------------------------\n\n# # First install the package installer pak: it can install R packages from:\n# # CRAN, Bioconductor, GitHub, URLs, git repositories, local files and directories.\n#   install.packages(c(\"pak\"))\n# # Use pak to install the remaining packages required\n#   pak::pkg_install(\"BiocManager\")\n#   pak::pkg_install(\"remotes\")\n#   pak::pkg_install(\"here\")\n#   pak::pkg_install(\"tidyverse\")\n#   pak::pkg_install(\"DESeq2\")\n#   pak::pkg_install(\"pheatmap\")\n#   pak::pkg_install(\"RColorBrewer\")\n#   pak::pkg_install(\"ggrepel\")\n#   pak::pkg_install(\"clusterProfiler\")\n#   pak::pkg_install(\"enrichplot\")\n#   pak::pkg_install(\"org.Mm.eg.db\")\n#   pak::pkg_install(\"patchwork\")\n#   pak::pkg_install(\"ComplexHeatmap\")\n# # Install the data package containing tidy RNAseq data for the course\n#   pak::pkg_install(\"patterninstitute/OSD758\")\n\n  \n#---------------\n# Load packages\n#---------------\nlibrary(\"here\")            # package to find your current working directory\nlibrary(\"tidyverse\")       # packages for data manipulation and visualization\nlibrary(\"DESeq2\")          # differential expression analysis\nlibrary(\"pheatmap\")        # heatmaps\nlibrary(\"RColorBrewer\")    # color palettes\nlibrary(\"ggrepel\")         # repel overlapping text labels in ggplot2 plots\nlibrary(\"clusterProfiler\") # for enrichment analysis\nlibrary(\"enrichplot\")      # to draw functional enrichment results\nlibrary(\"org.Mm.eg.db\")    # mouse gene annotation database\nlibrary(\"patchwork\")       # combining multiple plots\nlibrary(\"ComplexHeatmap\")  # to draw heatmaps\nlibrary(OSD758)            # Package containing the data\n\n\n## Load Gene expression in Counts\nraw_counts &lt;- OSD758::gene_expression(format = \"wide\", only_expressed_genes = TRUE) \n# View(raw_counts)\n\n## Load Samples metadata\nsamples &lt;- OSD758::samples()\n# View(samples)\n\n\n\n\n\n\n\nThe first step in any data analysis pipeline is quality control (QC) to check for data issues, and ensure the data is suitable for downstream analyses.\n\n\n2.1 Variance stabilization data transformation\nFor QC analysis, it is useful to work with transformed versions of the count data, variance-stabilised (vst) or regularised log-transformed (rlog) counts. While, the rlog is more robust to outliers and extreme values, vst is computationally faster and so preferred for larger datasets.\n\n\n\n\n\n\nInfo: The rlog() and the vst() functions from DESeq2\n\n\n\n\n\nThe rlog and the vst transformations have an argument, blind that can be set to:\n\nTRUE (default): useful for QC analysis because it re-estimates the dispersion, allowing for comparison of samples in an unbiased manner with respect to experimental conditions;\nFALSE: the function utilizes the already estimated dispersion, generally applied when differences in counts are expected to be due to the experimental design.\n\n\n\n\n\n\n\n\n\n\nAttention: vst and rlog Transformations are Used for Visualization Only\n\n\n\n\n\nVariance stabilization transformations are used for visualisation purposes only. Differential expression analysis using DESeq2 requires raw, unnormalized counts (not TPMs, RPKMs, or FPKMs).\n\n\n\n\n\nCode\n# Create a list to save the QC results\nqc &lt;- list()\n\n# You can choose between vst() and rlog() - this tutorial uses vst.\nqc$vst &lt;- DESeq2::vst(raw_counts, blind = TRUE)\n\n\n\n\n2.2 Principal Component Analysis\nCheck which variables from the experimental conditions are the major source of variation.\n\n\nCode\n# Run PCA\nqc$pca_vst &lt;- prcomp(t(qc$vst)) \n\n# Extract the components\nqc$components &lt;- qc$pca_vst[[\"x\"]]\nqc$components &lt;- tibble::as_tibble(qc$components, rownames = \"sample_id\")\n\n# Add sample annotations to components for plot coloring\nqc$components_annot &lt;-\n  dplyr::left_join(qc$components, as.data.frame(samples[, c(1,5,6,8)]), by = \"sample_id\") |&gt;\n  dplyr::relocate(spacecraft, acceleration_source, gravity_class, .after = sample_id)\n\n# Calculate the % variance per component\nqc$pca_percent_var &lt;- round(qc$pca_vst$sdev^2/sum(qc$pca_vst$sdev^2)*100)\n\n#\n# 2D PCA | Using ggplot2\n#\n\n# Color by gravity_class\nqc$pca_gravity &lt;-\n  ggplot(qc$components_annot, aes(x = PC1, y = PC2, color = gravity_class)) +\n  geom_point(size = 3) +\n  labs(\n    title = \"PCA gene expression | Colored by gravity_class\",\n    x = paste0(\"PC1 (\", qc$pca_percent_var[1], \"% variance)\"),\n    y = paste0(\"PC2 (\", qc$pca_percent_var[2], \"% variance)\")\n  ) +\n  theme_minimal()\n\n# Color by accelaration_source\nqc$pca_acceleration &lt;-\n  ggplot(qc$components_annot, aes(x = PC1, y = PC2, color = acceleration_source)) +\n  geom_point(size = 3) +\n  labs(\n    title = \"PCA gene expression | Colored by acceleration_source\",\n    x = paste0(\"PC1 (\", qc$pca_percent_var[1], \"% variance)\"),\n    y = paste0(\"PC2 (\", qc$pca_percent_var[2], \"% variance)\")\n  ) +\n  theme_minimal()\n\n# Color by gravity_class and shape by acceleration_source\nqc$pca_gravity_acceleration &lt;-\n  ggplot(qc$components_annot, aes(x = PC1, y = PC2, \n                               color = gravity_class,\n                               shape = acceleration_source)) +\n  geom_point(size = 3) +\n  labs(\n    title = \"PCA gene expression | Colored by gravity_class | Shape acceleration_source\",\n    x = paste0(\"PC1 (\", qc$pca_percent_var[1], \"% variance)\"),\n    y = paste0(\"PC2 (\", qc$pca_percent_var[2], \"% variance)\")\n  ) +\n  theme_minimal()\n\n\n# Assemble pca plots\nqc$pca_gravity_acceleration /\n(qc$pca_gravity | qc$pca_acceleration)\n\n\n\n\n\n\n\n\n\n\n\n2.3 Hierarchical clustering\nCheck how similar the replicates are to each other.\n\nDistance between samples (in gene expression space) - Euclidean distance.\n\n\n\nCode\n# Plot sample to sample distance for hierarchical clustering\n\n# Calculate Euclidean distances between samples (rows) by transposing the matrix with t().\nqc$sample_dist_matrix &lt;- as.matrix(dist(t(qc$vst), method = \"euclidean\"))\n\n\n# Define a color palette for the heatmap\nqc$colors &lt;- colorRampPalette(rev(brewer.pal(9, \"Greens\")))(255) # function from RColorBrewer package\n\n# Create the heatmap\nqc$dist_clustering &lt;- pheatmap::pheatmap(\n  qc$sample_dist_matrix,\n  cluster_rows = TRUE,\n  cluster_cols = TRUE,\n  col = qc$colors,\n  fontsize_col = 8,\n  fontsize_row = 5\n)\n\n\n\n\n\n\n\n\n\n\nCorrelation between samples.\n\n\n\nCode\n### Compute pairwise correlation values\nqc$sample_corr &lt;- cor(qc$vst)\n\n### Plot heatmap using the correlation matrix\nqc$corr_clustering &lt;-\n  pheatmap::pheatmap(\n    qc$sample_corr,\n    cluster_rows = TRUE,\n    cluster_cols = TRUE,\n    fontsize_row = 5,\n    fontsize_col = 8\n  )\n\n\n\n\n\n\n\n\n\n\n\n3.1 Check if the data and metadata sample ids match\nTo avoid errors in DESeq2 is essential to check that sample names match between the colData and the countData, and that the samples are in the exact same order.\n\n\nCode\n# Create list to save the analysis objects\nde_deseq &lt;- list()\n\n# Check that sample ids match between raw_counts and samples \n# Ensure same content\nstopifnot(setequal(colnames(raw_counts), samples$sample_id))\n\n# Reorder columns to match sample order\nraw_counts &lt;- raw_counts[, samples$sample_id]\n\n\n\n\n3.2 Differential Expression with DESeq2\nThe calculation of the differential expression using DESeq2 requires raw (unnormalized) integer counts, a sample metadata table with experimental conditions, and a design formula specifying the variables for model fitting.\nThis will generate a dds object.\n\n\nCode\n# Make sure the factor levels are ordered so that the desired baseline comes first.\n# DESeq2 uses the first level from factors as the baseline.\nsamples &lt;-\n  samples |&gt;\n  dplyr::mutate(gravity_class = factor(\n    gravity_class,\n    levels = c(\"1.00_G\", \"0.33_G\", \"0.66_G\", \"micro_G\")\n  ))\n\n\n# DE Step 1: Create a DESeqDataSet object (dds)\nde_deseq$dds &lt;- DESeq2::DESeqDataSetFromMatrix(\n  countData = raw_counts,\n  colData = samples,\n  design = ~ gravity_class\n)\n\n# DE Step 2: Run the DESeq function to perform the analysis\nde_deseq$dds &lt;- DESeq(de_deseq$dds)\n\n\n\n\n\n\n\n\nOptional: DESeq() function can be separated into individual steps\n\n\n\n\n\nThe DESeq() function is a high-level wrapper that simplifies the process of differential expression analysis by combining multiple steps into a single function call. This makes the workflow more user-friendly and ensures that all necessary pre-processing and statistical steps are executed in the correct order. The key functions that DESeq2 calls include:\n\nestimateSizeFactors: to normalise the count data;\nestimateDispersion: to estimate the dispersion;\nnbinomWaldTest: to perform differential expression test.\n\nThe individual functions can be carried out also singularly as shown below:\n\n# Differential expression analysis step-by-step\nde_deseq$dds_stepwise &lt;- DESeq2::estimateSizeFactors(de_deseq$dds)\n\nde_deseq$dds_stepwise &lt;- DESeq2::estimateDispersions(de_deseq$dds_stepwise)\n\nde_deseq$dds_stepwise &lt;- DESeq2::nbinomWaldTest(de_deseq$dds_stepwise)\n\n\n\n\n\n\n\n\n\nOptional: Pre-filtering of low count genes is sometimes performed\n\n\n\n\n\nBefore running the different steps of the analysis, sometimes its is advisable to pre-filter the genes to remove those with very low counts. This is useful to improve computational efficiency and enhance interpretability. In general, it is reasonable to keep only genes with sum counts of at least 10 for a minimal number of 3 samples. Here is the optional code.\n# Pre-filtering\n\n# Select a minimal number of samples = 3\nsmallestGroupSize &lt;- 3\n\n# Select genes with sum counts of at least 10 in 3 samples\nkeep &lt;- rowSums(counts(de_deseq$dds) &gt;= 10) &gt;= smallestGroupSize\n\n# Keep only the genes that pass the threshold\nde_deseq$dds_filtered &lt;- de_deseq$dds[keep,]\n\n\n\n\n\n3.3 Inspect the dds object\n\n\n\n\n\n\nInfo: dds object from DESeq2\n\n\n\n\n\nIn DESEq2, the dds object is a central data structure that contains the following components:\n\ncountData: a matrix of raw count data, where each row represents a gene and each column represents a sample;\ncolData: a data frame containing information about the samples, such as the experimental design, treatment and other relevant metadata;\ndesign: a formula specifying the experimental design used to estimate the dispersion and the log2 fold change.\n\n\n\n\n\n\nCode\n# Check the design formula\nDESeq2::design(de_deseq$dds) \n\n# Check the sample info\nSummarizedExperiment::colData(de_deseq$dds) \n\n# Display the first rows of the raw counts\nhead(DESeq2::counts(de_deseq$dds))\n\n# Display the first rows of the normalised counts to compare with raw counts \nhead(DESeq2::counts(de_deseq$dds, normalized = TRUE))\n\n# Convert the normalised counts from the DESeq2 object to a tibble\nnormalised_counts &lt;- tibble::as_tibble(DESeq2::counts(de_deseq$dds, normalized = TRUE),\n                                       rownames = \"ensembl_gen_id\")\nhead(normalised_counts)\n\n\n\n\n3.4 Extract the Differential Expression results\n\n\n\n\n\n\nInfo: The results() function from DESeq2\n\n\n\n\n\nThe results() function in DESeq2 is used to extract the results of the DE analysis. This function takes the dds object as input and returns a DataFrame containing the results of the analysis:\n\nbaseMean: the average expression level of the gene across all samples;\nlog2FoldChange: the log2 fold change of the gene between the condition of interest and the reference level;\nlfcSE: the standard error of the log2 fold change;\nstat: the Wald statistic, which is used to calculate the p-value;\npvalue: the p-value from the Wald test indicates the probability of observing the measured difference in gene expression (log2 fold change) by chance, assuming no true difference exists (null hypothesis). A low p-value suggests that the observed expression change between samples is unlikely due to random chance, so we can reject the null hypothesis –&gt; the gene is differentially expressed;\npadj: the adjusted p-value, which takes into account multiple testing corrections, (Benjamini-Hochberg method default) to control the false discovery rate.\n\nThe results() function returns the results for all genes in the analysis with an adjusted p-value below a specific FDR cutoff, set by default to 0.1. This threshold can be modified with the parameter alpha. The results() function can also be customised to filter the results based on certain criteria (log2 fold change or padj) or to set a specific contrast (specific comparison between two or more levels).\n\n\n\n\n\nCode\n# Find the names of the estimated effects (coefficients) of the model\nDESeq2::resultsNames(de_deseq$dds)\n\n# Extract DE results for each gravity condition vs 1.00 G\n    # The results function by default applies the Benjamini-Hochberg method to control FDR\nde_deseq$res_033_vs_1G &lt;- DESeq2::results(de_deseq$dds, name = \"gravity_class_0.33_G_vs_1.00_G\")\nde_deseq$res_066_vs_1G &lt;- DESeq2::results(de_deseq$dds, name = \"gravity_class_0.66_G_vs_1.00_G\")\nde_deseq$res_micro_vs_1G &lt;- DESeq2::results(de_deseq$dds, name = \"gravity_class_micro_G_vs_1.00_G\")\n\n\n# Summarise the results:\n  # Shows the number of tested genes, the number up- and down-regulated (at alpha),\n  # and how many were excluded by multiple testing due to low counts.\nDESeq2::summary(de_deseq$res_033_vs_1G)\nDESeq2::summary(de_deseq$res_066_vs_1G)\nDESeq2::summary(de_deseq$res_micro_vs_1G)\n\n\n\n\n\n\n\n\nImportant: Extracting results from contrasts\n\n\n\n\n\nWhen more than one variable is used in the design formula, and you want to manually specify the comparison of interest, you should run the following command:\nmy_results &lt;- DESeq2::results(dds, contrast = c(\"variable_name\", \"condition_of_interest\", \"reference_condition\"))\nExample:\nIf the design is ~ tissue + condition, and you want to compare the levels \"treated\" vs \"control\" within the variable \"condition\": my_results &lt;- DESeq2::results(dds, contrast = c(\"condition\", \"treated\", \"control\"))\nThis will extract the log2 fold change of \"treated\" relative to \"control\", controlling for the effect of the other variables in the design.\n\n\n\n\n\n3.5 Select significant DE results\n\n\n\n\n\n\nInfo: The Order of the Contrasts Determines the Fold Change Signal\n\n\n\n\n\nThe order of the contrast names determines the direction of the fold change that is reported in the results. Specifically, the first level of the contrast is the condition of interest and the second level is the reference level.\n\n\n\n\n\nCode\n# Extract significant results (padj &lt; 0.05) and convert to tibble\nde_deseq$sig_033_vs_1G &lt;-\n  de_deseq$res_033_vs_1G |&gt;\n  tibble::as_tibble(rownames = \"ensembl_gen_id\") |&gt;\n  dplyr::filter(!is.na(padj), padj &lt; 0.05) |&gt;\n  dplyr::arrange(padj, log2FoldChange)\n\nde_deseq$sig_066_vs_1G &lt;-\n  de_deseq$res_066_vs_1G |&gt;\n  tibble::as_tibble(rownames = \"ensembl_gen_id\") |&gt;\n  dplyr::filter(!is.na(padj), padj &lt; 0.05) |&gt;\n  dplyr::arrange(padj, log2FoldChange)\n\nde_deseq$sig_micro_vs_1G &lt;-\n  de_deseq$res_micro_vs_1G |&gt;\n  tibble::as_tibble(rownames = \"ensembl_gen_id\") |&gt;\n  dplyr::filter(!is.na(padj), padj &lt; 0.05) |&gt;\n  dplyr::arrange(padj, log2FoldChange)\n\n# Look at the top results\nhead(de_deseq$sig_033_vs_1G)\nhead(de_deseq$sig_066_vs_1G)\nhead(de_deseq$sig_micro_vs_1G)\n\n\n\n\nAfter differential expression analysis, the next step is to visualize the data. This helps reveal patterns not obvious from the raw numbers.\nThe next sections show common plots used in RNA-seq analysis.\nDue to time constraints, we will focus on the differential expression between microgravity and Earth’s gravity (1G).\n\n\n\n\n\n\nOptional: MA plots and counts plots\n\n\n\n\n\n\nMA plot: scatter plot commonly utilised to visualise the results of the DE analysis for all the samples. The plot displays the mean of the normalised counts on the x-axis and the log2 fold change on the y-axis. This allows the visualisation of the relationship between the magnitude of the fold change and the mean expression level of the genes. Genes that are differentially expressed will appear farthest from the horizontal line, while genes with low expression levels will appear closer to the line.\ncounts plot: plot of the normalised counts for a single gene across the different conditions in your experiment. It’s particularly useful for visualising the expression levels of specific genes of interest and comparing them across sample groups.\n\n# Generate the MA plot\nplotMA(res, ylim = c(-2, 2))\n\n# Plot a specific gene in this case Xist, a DE gene\n# plotCounts(de_deseq$dds, gene = \"Xist\")\n\n\n\n\n\n4.1 Heatmap\n\n\n\n\n\n\nInfo: Heatmaps\n\n\n\n\n\nHeatmaps plot of the normalised counts for all the significant genes. The heatmap provides insights into genes and sample relationships that may not be apparent from individual gene plots alone.\n\n\n\n\n\nCode\n# List to save all the visualization plots\nde_plots &lt;- list()\n\n# Extract only gene ids from the significant results\nsig_gene_ids &lt;- de_deseq$sig_micro_vs_1G$ensembl_gen_id\n\n# Map between ENSEMBL gene ids and gene symbol\nensembl2symbol &lt;- OSD758::gene_expression(\"long\") |&gt;\n  dplyr::select(ensembl_gen_id, gene_symbol) |&gt;\n  dplyr::distinct()\n  \n# Get normalised counts for significant genes \nsig_normalised_counts &lt;- normalised_counts |&gt;\n  dplyr::filter(ensembl_gen_id %in% sig_gene_ids) |&gt;\n  dplyr::left_join(ensembl2symbol, by = \"ensembl_gen_id\") |&gt;\n  dplyr::select(-ensembl_gen_id) |&gt;\n  tibble::column_to_rownames(\"gene_symbol\") |&gt;\n  as.matrix()\n\n\n# Scale each row: subtract mean and divide by SD.\n# The 2 transpositions are required because, by default, scale applies to the columns.\nsig_normalised_counts_scaled &lt;- t(scale(t(sig_normalised_counts)))   # scale rows, not columns\n\n# Find min and max values to get meaningful colors in heatmaps\nrange(sig_normalised_counts_scaled)\n\n\n[1] -3.324583  5.724152\n\n\nCode\n# Complex heatmap\nde_plots$ht &lt;- ComplexHeatmap::Heatmap(sig_normalised_counts_scaled[1:200, ],\n                        name = \"Exprs (z-score)\",\n                        column_title = \"Microgravity vs Earth's Gravity (1G) | Top 200 DE genes\",\n                        cluster_columns = TRUE,\n                        cluster_rows = TRUE,\n                        # number of clusters in K-means to split rows\n                        row_km = 2,\n                        # add cluster names\n                        row_title = c(\"A\", \"B\"),\n                        row_title_rot = 90,\n                        row_gap = unit(2, \"mm\"),\n                        # number of clusters in K-means to split columns\n                        column_km = 3,\n                        column_gap = unit(2, \"mm\"),\n                        border = \"grey\",\n                        na_col = \"white\",\n                        # Color range (min and max values from sig_normalised_counts_scaled)\n                        col = circlize::colorRamp2(c(-4, 0, 6), c(\"skyblue3\", \"white\", \"forestgreen\")),\n                        column_names_gp = grid::gpar(fontsize = 9),\n                        row_names_gp = grid::gpar(fontsize = 5),\n                        rect_gp = grid::gpar(col = \"grey\", lwd = 0.5))\n\n# Print the plot\nComplexHeatmap::draw(de_plots$ht, heatmap_legend_side = \"right\")\n\n\n\n\n\n\n\n\n\n\n\n4.2 Volcano plot\n\n\n\n\n\n\nInfo: Volcano plots\n\n\n\n\n\nVolcano plots scatter plot that displays the log2 fold change on the x-axis and the log transformed padj on the y-axis. This allows for the visualisation of both the magnitude and significance of the changes in gene expression between two conditions. Genes that are differentially expressed (i.e., have a large log2 fold change) and are statistically significant (i.e., have a low padj) will appear in the left (downregulated genes) or in the right (upregulated genes) corners of the plot making easier their identification.\n\n\n\n\n\nCode\n# Add a column with differential expression status and add gene symbol to the results\nsig_res_annot &lt;- \n  de_deseq$sig_micro_vs_1G |&gt;\n  dplyr::mutate(diffexpressed = case_when(\n    log2FoldChange &gt; 1 & padj &lt; 0.05 ~ 'upregulated',\n    log2FoldChange &lt; -1 & padj &lt; 0.05 ~ 'downregulated',\n    TRUE ~ 'not_de')) |&gt;\n  dplyr::left_join(ensembl2symbol, by = \"ensembl_gen_id\") |&gt;\n  dplyr::select(-ensembl_gen_id) |&gt;\n  # add gene symbols\n  dplyr::relocate(gene_symbol, .before =  1L) |&gt;\n  dplyr::arrange(padj, log2FoldChange)\n\n\n# Create a volcano plot using ggplot2\nde_plots$volcano_plot &lt;-\n  ggplot(data = sig_res_annot, aes(\n    x = log2FoldChange,\n    y = -log10(padj),\n    col = diffexpressed))+\n  geom_point(size = 0.6) +\n  geom_text_repel(data = filter(sig_res_annot, \n                                ((abs(log2FoldChange) &gt; log2(8)) & (padj &lt; -log10(0.05)))), \n                  aes(label = gene_symbol), size = 2.5, max.overlaps = Inf) +\n  ggtitle(\"DE genes micro gravity versus Earth's gravity\") +\n  geom_vline(xintercept = c(-1, 1), col = \"black\", linetype = 'dashed', linewidth = 0.2) +\n  geom_hline(yintercept = -log10(0.05), col = \"black\", linetype = 'dashed', linewidth = 0.2) +\n  theme(plot.title = element_text(size = rel(1.25), hjust = 0.5),\n        axis.title = element_text(size = rel(1))) +\n  scale_color_manual(values = c(\"upregulated\" = \"red\",\n                                \"downregulated\" = \"blue\",\n                                \"not_de\" = \"grey\")) +\n  labs(color = 'DE genes') +\n  xlim(-5, 5) +   # Caution: This hides some genes\n  ylim(0, 7.5) +  # Caution: This hides some genes\n  theme_light()\n\n# Print the volcano plot\nde_plots$volcano_plot\n\n\n\n\n\n\n\n\n\n\n\nDifferential expression analysis yields a list of significant DE genes, which can be explored further through downstream analyses like functional enrichment and network analysis to uncover biological mechanisms.\nThis tutorial focuses on Over-Representation Analysis (ORA), a method for identifying enriched pathways or processes among DE genes.\n\n\n\n\n\n\nInfo: The hypergeometric test in ORA\n\n\n\n\n\nThe underlying statistic behind ORA is the hypergeometric test, which considers three key components:\n\nUniverse: the background list of genes (for example the genes annotated in a genome);\nGeneSet: a collection of genes annotated by a reference database (such as Gene Ontology), and known to be involved in a particular biological pathway or process;\nGene List: the differentially expressed genes.\n\nThe hypergeometric test calculates the probability of observing a certain number of genes from the gene set (pathway or process) within the gene list (DE genes) by chance. An important aspect of this analysis is the concept of membership. It defines the relationship between DE genes and genes from the analysed gene set. By knowing which genes belong to which pathway/process, we can determine whether the observed overlap between DE genes and the particular pathway/process is greater than what would be expected by random chance.\n\n\n\n\n\n5.1 Enrichment analysis\n\n\nCode\n# Enrichment analysis (ORA)\n\n# Create a list to save the enrichment analysis results\nfun_enrich &lt;- list()\n\n# Prepare list of significant DE genes in descending Log2FoldChange\nfun_enrich$de_genes_fc &lt;-\n  de_deseq$sig_micro_vs_1G |&gt;\n  dplyr::select(ensembl_gen_id, log2FoldChange) |&gt;\n  dplyr::arrange(dplyr::desc(log2FoldChange))\n\n# Run GO enrichment analysis using the enrichGO function\nfun_enrich$ego &lt;- clusterProfiler::enrichGO(\n  gene = fun_enrich$de_genes_fc$ensembl_gen_id, # Genes of interest\n  universe = ensembl2symbol$ensembl_gen_id,     # Background gene set\n  OrgDb = org.Mm.eg.db,                         # Annotation database\n  keyType = 'ENSEMBL',                          # Key type for gene identifiers\n  readable = TRUE,                              # Convert gene IDs to gene names\n  ont = \"BP\",                                   # Ontology: can be \"BP\", \"MF\", \"CC\", or \"ALL\"\n  pvalueCutoff = 0.05,                          # P-value cutoff for significance\n  qvalueCutoff = 0.10                           # Q-value cutoff for significance\n)\n\n\n# Visualize the enriched GO terms\nfun_enrich$dotplot &lt;- \n  enrichplot::dotplot(fun_enrich$ego, showCategory = 20, title = \"GO BP | Enrichment barplot\")\n\nfun_enrich$heatplot &lt;- \n  enrichplot::heatplot(fun_enrich$ego, showCategory = 10, \n                       foldChange = fun_enrich$de_genes_fc$log2FoldChange) +\n  ggplot2::ggtitle(\"GO BP | Enrichment heatplot\")\n\nfun_enrich$emapplot &lt;- \n  enrichplot::emapplot(pairwise_termsim(fun_enrich$ego), showCategory = 15, layout = \"nicely\")\n\nfun_enrich$cnetplot &lt;- \n  enrichplot::cnetplot(fun_enrich$ego, categorySize = \"pvalue\", showCategory = 5, \n                                 layout = \"nicely\", foldChange = fun_enrich$de_genes_fc$log2FoldChange)\n\nfun_enrich$treeplot &lt;- \n  enrichplot::treeplot(enrichplot::pairwise_termsim(fun_enrich$ego), \n                       showCategory = 20, nCluster=5, offset = rel(2)) + \n  ggplot2::ggtitle(\"GO BP | Enrichment treeplot\") + \n  ggplot2::theme(text = element_text(size = 8))\n\n\n# Combine the enrichment plots into panels from a single figure\n(fun_enrich$dotplot) |\n(fun_enrich$emapplot / fun_enrich$cnetplot)\n\n\n\n\n\n\n\n\n\nCode\nfun_enrich$treeplot / fun_enrich$heatplot\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "index.html#rna-seq-analysis-crash-course",
    "href": "index.html#rna-seq-analysis-crash-course",
    "title": "RNA-seq | From Counts 2 Biological Insights",
    "section": "RNA-seq Analysis Crash Course",
    "text": "RNA-seq Analysis Crash Course\nWelcome! This crash course walks you through RNA-seq data analysis in R: From raw count matrices to functional interpretation of differentially expressed genes."
  },
  {
    "objectID": "contact_me.html",
    "href": "contact_me.html",
    "title": "Contact me",
    "section": "",
    "text": "Feel free to reach out if you need assistance with these training materials, or just to say hi!\n\nLoading…\n\n\n\n\n Back to top"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Introduction",
    "section": "",
    "text": "RNA-seq is a leading method for quantifying RNA levels in biological samples, leveraging next-generation sequencing (NGS) technologies. The process begins with RNA extraction and conversion to cDNA, followed by sequencing to produce reads representing the RNA present in a sample.\n\nRNA-seq overviewDifferential expressionFunctional analysis\n\n\nLab Protocol Overview\n\n\n\nRNA-seq data (i.e. reads) are processed through a standard workflow with three main stages:\n\nData pre-processing – improves read quality by removing contaminants and adapters.\nAlignment and quantification – maps reads to a reference genome and estimates gene expression, either through traditional or faster lightweight methods.\nDifferential expression analysis – identifies and visualizes genes with significant expression differences.\n\nAdditional downstream analyses (e.g., functional enrichment, co-expression, or multi-omics integration) are popular ways to derive biological insights from these analyses.\n\n\n\nAdapted from: https://nf-co.re/rnaseq/dev/docs/usage/differential_expression_analysis/theory\n\n\nNote | As shown in the above scheme, this course will not cover the first two steps. It will begin with a gene count matrix and proceed with differential expression analysis, visualization, and a brief overview of functional enrichment.\n\n\nDifferential expression (DE) analysis compares gene expression levels across conditions (e.g., disease vs. healthy) to identify genes with statistically significant changes. This is typically done using tools like DESeq2, a robust R package designed for analyzing RNA-seq count data.\n\nInput Requirements:\n\nA count matrix (genes × samples).\nA metadata table describing sample attributes.\n\nQuality Control:\n\nUse PCA and hierarchical clustering to explore variation and detect outliers.\nTransform counts using variance stabilizing transformation (vst) or regularized log (rlog) to ensure comparable variance across genes, improving downstream analysis.\n\nFiltering:\n\nRemove genes with low or zero counts to improve sensitivity and reduce false positives.\n\nDesign Formula:\n\nSpecifies how gene counts depend on experimental factors.\nCan include main conditions and covariates (e.g., gender, batch, stage).\nExample:\ndesign = ~ condition\ndesign = ~ gender + developmental_stage + condition\nThe main factor of interest is usually placed last for clarity.\n\n\n\nDE with DESeq2\nDESeq2 is a widely used R package for identifying differentially expressed (DE) genes from RNA-seq count data. RNA-seq data typically exhibit many low-count genes and a long-tailed distribution due to highly expressed genes, requiring specialized statistical modeling. The major steps in DESeq2 are the following:\n\nNormalization\n\nAdjusts for sequencing depth and RNA composition using size factors calculated via the median ratio method.\nNormalized counts are used for visualization but raw counts must be used for DESeq2 modeling.\n\nDispersion Estimation\n\nRNA-seq data show overdispersion (variance &gt; mean).\nDESeq2 models count data using the negative binomial distribution.\nDispersion is estimated:\n\nGlobally (common dispersion),\nPer gene (gene-wise dispersion),\nThen refined through shrinkage toward a fitted mean-dispersion curve to improve stability, especially with small sample sizes.\n\nGenes with extreme variability are not shrunk to avoid false positives.\n\nModel Fitting and Hypothesis Testing\n\nA generalized linear model (GLM) is fit to each gene’s normalized counts.\nDESeq2 tests whether gene expression differs significantly between groups:\n\nWald test for simple comparisons (e.g., treated vs. control),\nLikelihood Ratio Test (LRT) for more complex designs with multiple variables.\n\nEach test returns a log2 fold change and a p-value.\n\nMultiple Testing Correction\n\nTo control for false positives from testing thousands of genes, DESeq2 adjusts p-values using Benjamini-Hochberg FDR correction.\nAn FDR cutoff of &lt;0.05 means that 5% of DE genes may be false positives.\n\n\n\n\n\nAfter identifying differentially expressed (DE) genes, functional analysis helps interpret their biological relevance by uncovering the pathways, processes, or interactions they may be involved in. This includes:\n\nFunctional enrichment analysis – identifies overrepresented biological processes, molecular functions, cellular components, or pathways.\nNetwork analysis – groups genes with similar expression patterns to reveal potential interactions.\n\nThis course focuses on Over-Representation Analysis (ORA), a common enrichment method that uses the hypergeometric test to assess whether certain biological pathways or gene sets are statistically enriched in the DE gene list.\nKey components of ORA:\n\nUniverse – the full set of genes considered (e.g., all genes in the genome).\nGene Set – a group of genes annotated to a particular function or pathway (e.g., from Gene Ontology).\nGene List – the list of DE genes identified in the analysis.\n\nThe test evaluates whether the overlap between the DE gene list and a gene set exceeds what would be expected by chance, pointing to potentially meaningful biological mechanisms.\nTools commonly used for functional enrichment include Gene Ontology, KEGG, Reactome, clusterProfiler, and g:Profiler. These support the biological interpretation of DE results and help uncover pathways affected by the experimental condition.\n\n\n\n\n\n\n\n Back to top"
  }
]